/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.Teofilo.Conta;

import br.Teofilo.Cliente.SeletorDeClienteJD;
import br.Teofilo.Bean.Cliente;
import br.Teofilo.Bean.Conta;
import br.Teofilo.Bean.ContaSub;
import br.Teofilo.Bean.GerarLogErro;
import br.Teofilo.DAO.ClienteDAO;
import br.Teofilo.DAO.ContaDAO;
import funcoes.CDate;
import java.awt.Point;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Jonathan
 */
public class RelatorioContaJD extends javax.swing.JDialog {

    private final Point point = new Point();
    private Cliente cliente;

    /**
     * Creates new form RelatorioContaJD
     *
     * @param parent set parent
     * @param modal set modal
     */
    public RelatorioContaJD(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg1 = new javax.swing.ButtonGroup();
        bg2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        dataini = new javax.swing.JFormattedTextField();
        datafim = new javax.swing.JFormattedTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        opcliente = new javax.swing.JRadioButton();
        opgeral = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        oppago = new javax.swing.JRadioButton();
        opaberto = new javax.swing.JRadioButton();
        optodos = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel3MouseDragged(evt);
            }
        });
        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel3MousePressed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_cancel_18px.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Relatórios");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(128, 128, 128)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        try {
            dataini.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        dataini.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        dataini.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        try {
            datafim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        datafim.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        datafim.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Data Inicial");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Data Final");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/check-circle-07.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        opcliente.setBackground(new java.awt.Color(255, 255, 255));
        opcliente.setText("Cliente Específico");

        opgeral.setBackground(new java.awt.Color(255, 255, 255));
        opgeral.setText("Geral");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(opcliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(69, 69, 69)
                .addComponent(opgeral, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(opcliente)
                    .addComponent(opgeral))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        oppago.setBackground(new java.awt.Color(255, 255, 255));
        oppago.setText("Já Pagos");

        opaberto.setBackground(new java.awt.Color(255, 255, 255));
        opaberto.setText("Em Aberto");

        optodos.setBackground(new java.awt.Color(255, 255, 255));
        optodos.setText("Todos");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(oppago, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(opaberto, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                .addGap(29, 29, 29)
                .addComponent(optodos, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oppago)
                    .addComponent(opaberto)
                    .addComponent(optodos))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1))
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(dataini))
                        .addGap(47, 47, 47)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(datafim)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(datafim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jPanel3MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseDragged
        Point p = this.getLocation();
        this.setLocation(p.x + evt.getX() - point.x, p.y + evt.getY() - point.y);
    }//GEN-LAST:event_jPanel3MouseDragged

    private void jPanel3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MousePressed
        point.x = evt.getX();
        point.y = evt.getY();
    }//GEN-LAST:event_jPanel3MousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        gerarRelatorio();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RelatorioContaJD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RelatorioContaJD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RelatorioContaJD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RelatorioContaJD.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RelatorioContaJD dialog = new RelatorioContaJD(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bg1;
    private javax.swing.ButtonGroup bg2;
    private javax.swing.JFormattedTextField datafim;
    private javax.swing.JFormattedTextField dataini;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JRadioButton opaberto;
    private javax.swing.JRadioButton opcliente;
    private javax.swing.JRadioButton opgeral;
    private javax.swing.JRadioButton oppago;
    private javax.swing.JRadioButton optodos;
    // End of variables declaration//GEN-END:variables

    private void init() {
        dataini.setText(CDate.DataPTBRAtual());
        datafim.setText(CDate.DataPTBRAtual());
        opcliente.setSelected(true);
        oppago.setSelected(true);
        bg1.add(opcliente);
        bg1.add(opgeral);
        bg2.add(oppago);
        bg2.add(opaberto);
        bg2.add(optodos);
    }

    private void gerarRelatorio() {
        try {
            Date a, b;
            a = new SimpleDateFormat("dd/MM/yyyy").parse(dataini.getText());
            b = new SimpleDateFormat("dd/MM/yyyy").parse(datafim.getText());
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioContaJD.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Preencha corretamente as datas.\ndd/mm/aaaa");
            return;
        }
        if (opcliente.isSelected()) { //cliente especifico
            SeletorDeClienteJD jd = new SeletorDeClienteJD(null, true);
            jd.setVisible(true);
            if (jd.getCliente() != null) {
                cliente = jd.getCliente();
            } else {
                JOptionPane.showMessageDialog(null, "Selecione o cliente.");
                return;
            }
            /* Cliente selecionado
            1º ja pagos
            2º em aberto
            3º todos
             */
            if (oppago.isSelected()) { //1º
                imprimir_relatorio_Pago(new LogPagoDAO().getLog_ID_CLIENTE(cliente.getId(), dataini.getText(), datafim.getText()), dataini.getText(), datafim.getText());
            } else if (opaberto.isSelected()) { //2º
                emAberto(cliente, dataini.getText(), datafim.getText());
            } else if (optodos.isSelected()) { //3º
                todos(cliente, dataini.getText(), datafim.getText());
            }
            dispose(); //como é um jDialog, se nao der dispose ele fica em cima do jasper
        } else { //geral
            /* GERAL
            1º ja pagos
            2º em aberto
            3º todos
             */
            if (oppago.isSelected()) { //1º
                imprimir_relatorio_Pago(new LogPagoDAO().getLog_GERAL(dataini.getText(), datafim.getText()), dataini.getText(), datafim.getText());
            } else if (opaberto.isSelected()) { //2º
                emAberto(null, dataini.getText(), datafim.getText());
            } else if (optodos.isSelected()) { //3º
                todos(null, dataini.getText(), datafim.getText());
            }
            dispose();//como é um jDialog, se nao der dispose ele fica em cima do jasper
        }
    }

    private void imprimir_relatorio_Pago(List<LogPago> list, String inicio, String fim) {
        try {
            double total = 0;
            for (LogPago p : list) {
                total += p.getValor_pago();
            }
            String src = "src\\PagoCliente.jasper";
            JasperPrint js;
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(list);
            HashMap<String, Object> map = new HashMap<>();
            map.put("valor_total", total);
            map.put("inicio", inicio);
            map.put("fim", fim);
            js = JasperFillManager.fillReport(src, map, ds);
            JasperViewer vw = new JasperViewer(js, false);
            vw.setTitle("Relatório");
            vw.setVisible(true);
            vw.setAlwaysOnTop(true);
        } catch (SecurityException | JRException ex) {
            GerarLogErro.gerar(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Algo deu errado.\n" + ex);
        }
    }

    private void emAberto(Cliente cliente, String inicio, String fim) {
        List<LogAberto> log = new ArrayList<>();
        double total_em_aberto = 0; //variavel contem a soma de todos os valores em aberto incluindo as parcelas em aberto
        double total = 0, pago = 0;
        if (cliente != null) {
            List<Conta> contas = new ContaDAO().getContas_ID_CLIENTE(cliente.getId());
            double[] captura = obterValoresEmAbertoDoCliente(cliente, contas, log, inicio, fim);
            total_em_aberto += captura[0];
            total += captura[1];
            pago += captura[2];
        } else { //geral em aberto
            List<Cliente> clientes = new ClienteDAO().getClintes();
            for (Cliente _cliente : clientes) {
                List<Conta> contas = new ContaDAO().getContas_ID_CLIENTE(_cliente.getId());
                double[] captura = obterValoresEmAbertoDoCliente(_cliente, contas, log, inicio, fim);
                total_em_aberto += captura[0];
                total += captura[1];
                pago += captura[2];
            }
        }
        imprimir_em_aberto(log, total_em_aberto, total, pago, inicio, fim);
    }

    private void imprimir_em_aberto(List<LogAberto> log, double total_em_aberto, double total, double pago, String inicio, String fim) {
        try {
            String src = "src\\AbertoCliente.jasper";
            JasperPrint js;
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(log);
            HashMap<String, Object> map = new HashMap<>();
            map.put("valor_total", total_em_aberto);
            map.put("total", total);
            map.put("pago", pago);
            map.put("inicio", inicio);
            map.put("fim", fim);
            js = JasperFillManager.fillReport(src, map, ds);
            JasperViewer vw = new JasperViewer(js, false);
            vw.setTitle("Relatório");
            vw.setVisible(true);
            vw.setAlwaysOnTop(true);
        } catch (SecurityException | JRException ex) {
            GerarLogErro.gerar(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Algo deu errado.\n" + ex);
        }
    }

    private double[] obterValoresEmAbertoDoCliente(Cliente cliente, List<Conta> contas, List<LogAberto> log, String inicio, String fim) {
        double total_em_aberto = 0, total = 0, pago = 0;
        //primeira interação do for para ver valores sem parcela e nao quitados
        for (Conta c : contas) {
            if (c.isParcelado() || c.getData_pagamento_final() != null) {
                continue;
            }
            try {
                if (new SimpleDateFormat("dd/MM/yyyy").parse(c.getEmissao()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(inicio)) >= 0
                        && new SimpleDateFormat("dd/MM/yyyy").parse(c.getEmissao()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(fim)) <= 0) {
                    total_em_aberto += (c.getValor() - c.getValor_ja_pago());
                    total += c.getValor();
                    pago += c.getValor_ja_pago();
                    LogAberto l = new LogAberto();
                    l.setNome(cliente.getNome());
                    l.setDesc(c.getDescricao());
                    l.setEmissao(c.getEmissao());
                    l.setVencimento(c.getVencimento());
                    l.setValor(c.getValor());
                    l.setValor_ja_pago(c.getValor_ja_pago());
                    log.add(l);
                }
            } catch (ParseException ex) {
                Logger.getLogger(RelatorioContaJD.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        //segunda interação do for para ver valores em aberto de parcelas
        for (Conta c : contas) {
            if (!c.isParcelado()) {
                continue;
            }
            for (ContaSub p : c.getConta_sub()) {
                if (p.getData_pago() == null) {
                    try {
                        if (new SimpleDateFormat("dd/MM/yyyy").parse(p.getVencimento()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(fim)) <= 0) {
                            total_em_aberto += p.getValor();
                            LogAberto l = new LogAberto();
                            l.setNome(cliente.getNome());
                            l.setDesc(c.getDescricao());
                            l.setEmissao(c.getEmissao());
                            l.setVencimento(p.getVencimento());
                            l.setValor(p.getValor());
                            l.setValor_ja_pago(0); //como é parcela nao tem valor "ja pago"
                            total += p.getValor();
                            log.add(l);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(RelatorioContaJD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        double[] retorno = new double[3];
        retorno[0] = total_em_aberto;
        retorno[1] = total;
        retorno[2] = pago;
        return retorno;
    }

    private double[] obterTodosValoresDoCliente(Cliente cliente, List<Conta> contas, List<LogAberto> log, String inicio, String fim) {
        double total_em_aberto = 0, total = 0, pago = 0;
        //primeira interação do for para ver valores sem parcela
        for (Conta c : contas) {
            if (!c.isParcelado()) {
                try {
                    if (new SimpleDateFormat("dd/MM/yyyy").parse(c.getEmissao()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(inicio)) >= 0
                            && new SimpleDateFormat("dd/MM/yyyy").parse(c.getEmissao()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(fim)) <= 0) {

                        LogAberto l = new LogAberto();
                        l.setNome(cliente.getNome());
                        l.setDesc(c.getDescricao());
                        l.setEmissao(c.getEmissao());
                        l.setVencimento(c.getVencimento());
                        l.setValor(c.getValor());
                        l.setValor_ja_pago(c.getValor_ja_pago());
                        l.setQuitacao(c.getData_pagamento_final());
                        log.add(l);

                        total_em_aberto += (c.getValor() - c.getValor_ja_pago());
                        total += c.getValor();
                        pago += c.getValor_ja_pago();
                    }
                } catch (ParseException ex) {
                    Logger.getLogger(RelatorioContaJD.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        //segunda interação do for para ver valores em aberto de parcelas
        for (Conta c : contas) {
            if (c.isParcelado()) {
                for (ContaSub p : c.getConta_sub()) {
                    try {
                        if (new SimpleDateFormat("dd/MM/yyyy").parse(p.getVencimento()).compareTo(new SimpleDateFormat("dd/MM/yyyy").parse(fim)) <= 0) {
                            LogAberto l = new LogAberto();
                            l.setNome(cliente.getNome());
                            l.setDesc(c.getDescricao());
                            l.setEmissao(c.getEmissao());
                            l.setVencimento(p.getVencimento());
                            l.setValor(p.getValor());
                            if (p.getData_pago() != null) { //parcela paga
                                l.setValor_ja_pago(p.getValor());
                                l.setQuitacao(p.getData_pago());
                            } else { //parcela nao paga
                                l.setValor_ja_pago(0);
                            }
                            total_em_aberto += l.getValor() - l.getValor_ja_pago();
                            total += p.getValor();
                            pago += l.getValor_ja_pago();
                            log.add(l);
                        }
                    } catch (ParseException ex) {
                        Logger.getLogger(RelatorioContaJD.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }
        double[] retorno = new double[3];
        retorno[0] = total_em_aberto;
        retorno[1] = total;
        retorno[2] = pago;
        return retorno;
    }

    private void todos(Cliente cliente, String inicio, String fim) {
        List<LogAberto> log = new ArrayList<>(); //essa classe tem tudo que o log todos precisa
        double total_em_aberto = 0;
        double total = 0, pago = 0;
        if (cliente != null) {
            List<Conta> contas = new ContaDAO().getContas_ID_CLIENTE(cliente.getId());
            double[] captura = obterTodosValoresDoCliente(cliente, contas, log, inicio, fim);
            total_em_aberto += captura[0];
            total += captura[1];
            pago += captura[2];
        } else { //geral em aberto
            List<Cliente> clientes = new ClienteDAO().getClintes();
            for (Cliente _cliente : clientes) {
                List<Conta> contas = new ContaDAO().getContas_ID_CLIENTE(_cliente.getId());
                double[] captura = obterTodosValoresDoCliente(_cliente, contas, log, inicio, fim);
                total_em_aberto += captura[0];
                total += captura[1];
                pago += captura[2];
            }
        }
        imprimir_todos(log, total_em_aberto, total, pago, inicio, fim);
    }

    private void imprimir_todos(List<LogAberto> log, double total_em_aberto, double total, double pago, String inicio, String fim) {
        try {
            String src = "src\\TodosCliente.jasper";
            JasperPrint js;
            JRBeanCollectionDataSource ds = new JRBeanCollectionDataSource(log);
            HashMap<String, Object> map = new HashMap<>();
            map.put("valor_total", total_em_aberto);
            map.put("total", total);
            map.put("pago", pago);
            map.put("inicio", inicio);
            map.put("fim", fim);
            js = JasperFillManager.fillReport(src, map, ds);
            JasperViewer vw = new JasperViewer(js, false);
            vw.setTitle("Relatório");
            vw.setVisible(true);
            vw.setAlwaysOnTop(true);
        } catch (SecurityException | JRException ex) {
            GerarLogErro.gerar(ex.getMessage());
            JOptionPane.showMessageDialog(null, "Algo deu errado.\n" + ex);
        }
    }

}
