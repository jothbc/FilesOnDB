/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.Teofilo.Documentos;

import br.Teofilo.Bean.Cliente;
import br.Teofilo.Bean.Documento;
import br.Teofilo.Bean.DocumentoPessoal;
import br.Teofilo.Bean.InfoArquivo;
import br.Teofilo.Bean.Processo;
import br.Teofilo.Bean.TipoDoc;
import br.Teofilo.DAO.ClienteDAO;
import br.Teofilo.DAO.DocumentoDAO;
import br.Teofilo.DAO.ProcessoDAO;
import br.Teofilo.DAO.TipoDocDAO;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Point;
import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class DocumentoJF extends javax.swing.JFrame {

    private static Point point = new Point();
    List<Cliente> clientes;
    DefaultListModel listClientes = new DefaultListModel();
    DefaultListModel listProcessoPessoal = new DefaultListModel();
    DefaultListModel listProcessos = new DefaultListModel();
    DefaultListModel listTipo = new DefaultListModel();
    DefaultListModel listDocumentos = new DefaultListModel();

    /**
     * Creates new form DocumentoJF
     */
    public DocumentoJF() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCliente = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDocumento = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        statustxt = new javax.swing.JTextField();
        modiftxt = new javax.swing.JFormattedTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListProcessoDadosPessoais = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListProcessos = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTipos = new javax.swing.JList<>();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/logo-2-teofilo-rocha-advocacia-balneario-camboriu-sc-advogado.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_cancel_18px.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jListCliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListCliente);

        jListDocumento.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListDocumento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDocumentoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListDocumento);

        jLabel1.setText("Clientes");

        jLabel2.setText("Documentos");

        jLabel6.setText("Status");

        jLabel7.setText("Ult. Modificação");

        statustxt.setBorder(null);

        modiftxt.setBorder(null);
        try {
            modiftxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        modiftxt.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);

        jListProcessoDadosPessoais.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListProcessoDadosPessoais.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListProcessoDadosPessoaisMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jListProcessoDadosPessoais);

        jListProcessos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListProcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListProcessosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jListProcessos);

        jListTipos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTiposMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jListTipos);

        jLabel9.setText("Relacionado ao Cliente");

        jLabel10.setText("Processos");

        jLabel11.setText("Tipos de Documentos");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/eye-19.png"))); // NOI18N
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-upload.png"))); // NOI18N
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-download.png"))); // NOI18N
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/pencil.png"))); // NOI18N
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(23, 23, 23)
                                        .addComponent(jLabel10))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton7))
                                .addGap(0, 9, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addGap(45, 45, 45)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel7)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(jLabel1)
                        .addGap(168, 168, 168)
                        .addComponent(jLabel9)
                        .addGap(96, 96, 96)
                        .addComponent(jLabel2)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                                .addComponent(jLabel11)
                                .addGap(11, 11, 11)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                                        .addComponent(jButton3)
                                                        .addGap(42, 42, 42))
                                                    .addComponent(jButton4))
                                                .addGap(51, 51, 51))
                                            .addComponent(jButton5))
                                        .addGap(18, 18, 18)
                                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel7)
                                    .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton7))))
                    .addComponent(jScrollPane1))
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        Point p = this.getLocation();
        this.setLocation(p.x + evt.getX() - point.x, p.y + evt.getY() - point.y);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        point.x = evt.getX();
        point.y = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jListClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClienteMouseClicked
        popularListProcessoPessoal();
    }//GEN-LAST:event_jListClienteMouseClicked

    private void jListDocumentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDocumentoMouseClicked
        atualizarInfos();
    }//GEN-LAST:event_jListDocumentoMouseClicked

    private void jListProcessoDadosPessoaisMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListProcessoDadosPessoaisMouseClicked
        verificarJListProcessoPessoal();
    }//GEN-LAST:event_jListProcessoDadosPessoaisMouseClicked

    private void jListProcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListProcessosMouseClicked
        carregarDocumentosDoProcessoSelecionado();
    }//GEN-LAST:event_jListProcessosMouseClicked

    private void jListTiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTiposMouseClicked
        carregarDocumentosDoTipoEProcessoSelecionado();
    }//GEN-LAST:event_jListTiposMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        visualizarArquivo();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        upload();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        download();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        editar();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addProcesso();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        addTipoDocumento();
    }//GEN-LAST:event_jButton7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocumentoJF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jListCliente;
    private javax.swing.JList<String> jListDocumento;
    private javax.swing.JList<String> jListProcessoDadosPessoais;
    private javax.swing.JList<String> jListProcessos;
    private javax.swing.JList<String> jListTipos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JFormattedTextField modiftxt;
    private javax.swing.JTextField statustxt;
    // End of variables declaration//GEN-END:variables

    private void init() {
        jListCliente.setModel(listClientes);
        jListDocumento.setModel(listDocumentos);
        jListProcessoDadosPessoais.setModel(listProcessoPessoal);
        jListProcessos.setModel(listProcessos);
        jListTipos.setModel(listTipo);
        clientes = new ClienteDAO().getClintes();
        popularListClientes();
    }

    private void popularListClientes() {
        clientes.forEach((c) -> {
            listClientes.addElement(c);
        });
    }

    private void popularListProcessoPessoal() {
        limparListas();
        listProcessoPessoal.removeAllElements();
        listProcessoPessoal.addElement("Processos");
        listProcessoPessoal.addElement("Dados Pessoais");
    }

    private void verificarJListProcessoPessoal() {
        if (listProcessoPessoal.isEmpty()) {
            return;
        }
        limparListas();
        Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Processos") {
            carregarProcessosDoClienteSelecionado(c);
        } else if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Dados Pessoais") {
            carregarDadosPessoaisDoClienteSelecionado(c);
        }
    }

    private void carregarProcessosDoClienteSelecionado(Cliente c) {
        List<Processo> processos = new ProcessoDAO().getProcessos(c.getId());
        for (Processo p : processos) {
            listProcessos.addElement(p);
        }
    }

    private void carregarDadosPessoaisDoClienteSelecionado(Cliente c) {
        listDocumentos.removeAllElements();
        List<DocumentoPessoal> docuemnto_pessoal = new DocumentoDAO().getDocumentosPessoais(c.getId());
        for (DocumentoPessoal d : docuemnto_pessoal) {
            listDocumentos.addElement(d);
        }
    }

    private void limparListas() {
        listDocumentos.removeAllElements();
        listProcessos.removeAllElements();
        listTipo.removeAllElements();
    }

    private void visualizarArquivo() {
        Documento d = null;
        DocumentoPessoal dp = null;
        try {
            if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Processos") {
                d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            } else if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Dados Pessoais") {
                dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
        if (d != null || dp != null) {
            File f = null;
            if (d != null) {
                f = new DocumentoDAO().getArquivo(d.getId(), "%temp%", "documentos");
                f.deleteOnExit();
            } else if (dp != null) {
                f = new DocumentoDAO().getArquivo(dp.getId(), "%temp%", "documentos_pessoais");
                f.deleteOnExit();
            }
            try {
                Desktop.getDesktop().open(f);
            } catch (IOException ex) {
                Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro ao tentar abrir o arquivo, informe o programador.", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void upload() {
        Cliente c = null;
        TipoDoc t = null;
        DocumentoPessoal dp = null;
        Processo p = null;
        try {
            c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        } catch (Exception ex) {
            String erro = "Sem cliente selecionado para upload.";
            System.err.println(erro);
            JOptionPane.showMessageDialog(this, erro, "Cliente", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try {
            if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Processos") {
                try {
                    p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem processo selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Processo", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                try {
                    t = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem tipo de documento selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Tipo de Documento", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } else if (listProcessoPessoal.getElementAt(jListProcessoDadosPessoais.getSelectedIndex()) == "Dados Pessoais") {
                dp = new DocumentoPessoal();
                dp.setID_CLIENTE(c.getId());
            }
        } catch (HeadlessException ex) {
            System.err.println("Sem informar se é Processo ou Dados Pessoais para upload.." + ex);
            String erro = "Sem cliente selecionado para upload.";
            System.err.println(erro);
            JOptionPane.showMessageDialog(this, erro, "Cliente", JOptionPane.INFORMATION_MESSAGE);
        }
        if (c != null) {
            UploadJD jd = new UploadJD(null, true, c, t, dp, p);
            jd.setVisible(true);
        }
    }

    private void download() {
        Documento d = null;
        DocumentoPessoal dp = null;
        try {
            d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
        } catch (Exception ex) {
        }
        try {
            dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
        } catch (Exception ex) {
        }
        if (d != null || dp != null) {
            JFileChooser fl = new JFileChooser();
            fl.setDialogTitle("Selecionar diretório");
            fl.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int op = fl.showOpenDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                File f = null;
                if (d != null) { //documento de processo (Documento)
                    f = new DocumentoDAO().getArquivo(d.getId(), fl.getSelectedFile().getPath() + "\\", "documentos");
                } else if (dp != null) { //documento pessoal (DocumentoPessoal)
                    f = new DocumentoDAO().getArquivo(dp.getId(), fl.getSelectedFile().getPath() + "\\", "documentos_pessoais");
                }
                try {
                    Desktop.getDesktop().open(f);
                } catch (IOException ex) {
                    Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private void atualizarInfos() {
        Documento d = null;
        DocumentoPessoal dp = null;
        try {
            d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
        } catch (Exception ex) {
        }
        try {
            dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
        } catch (Exception ex) {
        }
        if (d != null) {
            statustxt.setText(d.getStatus());
            modiftxt.setText(d.getModificacao());
        } else if (dp != null) {
            statustxt.setText("");
            modiftxt.setText(dp.getAlteracao());
        }
    }

    private void editar() {
        if (jListDocumento.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um documento para editar.");
            return;
        }
        Documento d = null;
        DocumentoPessoal dp = null;
        TipoDoc tp = null;
        Processo p = null;
        Cliente c = null;
        try {
            d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            tp = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
            p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
        } catch (Exception ex) {
        }
        try {
            dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        } catch (Exception ex) {
        }
        if (d != null || dp != null) {
            JFileChooser fl = new JFileChooser();
            fl.setDialogTitle("Selecionar arquivo");
            fl.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int op = fl.showOpenDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                File f = fl.getSelectedFile();
                if (d != null && tp != null && p != null) {
                    if (!new DocumentoDAO().updateDocumento(f, d.getId(), tp.getId(), p.getId())) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no bando de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    } else {
                        carregarDocumentosDoTipoEProcessoSelecionado();
                    }
                } else if (dp != null && c != null) {
                    if (!new DocumentoDAO().updateDocumentoPessoal(f, dp.getId())) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no bando de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    } else {
                        carregarDadosPessoaisDoClienteSelecionado(c);
                    }
                }
            }
        }
    }

    private void carregarDocumentosDoProcessoSelecionado() {
        Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
        listTipo.removeAllElements();
        listDocumentos.removeAllElements();
        if (listProcessos.size() > 0) {
            List<TipoDoc> tiposDeDocumentos = new TipoDocDAO().findAllByClienteEProcesso(c,p);
            for (TipoDoc t : tiposDeDocumentos) {
                listTipo.addElement(t);
            }
        }
    }

    private void carregarDocumentosDoTipoEProcessoSelecionado() {
        listDocumentos.removeAllElements();
        if (listTipo.isEmpty()) {
            return;
        }
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            TipoDoc t = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
            List<Documento> documentos = new DocumentoDAO().getDocumentosDeProcessoETipo(c.getId(), p.getId(), t.getId());
            for (Documento d : documentos) {
                listDocumentos.addElement(d);
            }
        } catch (Exception ex) {
            System.err.println(ex);
        }
    }

    private void addProcesso() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            NovoProcessoJD jd = new NovoProcessoJD(null, true, c);
            jd.setVisible(true);
            jListProcessoDadosPessoais.setSelectedIndex(0);
            verificarJListProcessoPessoal();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Sem cliente selecionado.\n" + ex, "Erro", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addTipoDocumento() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            NovoTipoDocJD jd = new NovoTipoDocJD(null, true,c,p);
            jd.setVisible(true);
            carregarDocumentosDoProcessoSelecionado();
        }catch(Exception ex){
            System.out.println(ex);
        }
    }

}
