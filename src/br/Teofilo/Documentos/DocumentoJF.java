/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.Teofilo.Documentos;

import JDBC.ConnectionFactoryMySQL;
import br.Teofilo.Atividades.AtividadesJF;
import br.Teofilo.Atividades.EmailDAO;
import br.Teofilo.Bean.Arquivo;
import br.Teofilo.Bean.Cliente;
import br.Teofilo.Bean.Documento;
import br.Teofilo.Bean.DocumentoPessoal;
import br.Teofilo.Bean.GerarLogErro;
import br.Teofilo.Bean.Processo;
import br.Teofilo.Bean.TipoDoc;
import br.Teofilo.Bean.User;
import br.Teofilo.Chat.ChatJF;
import br.Teofilo.Chat.ChatServidor;
import br.Teofilo.Cliente.ClienteJD;
import br.Teofilo.Conta.ContasClienteJF;
import br.Teofilo.DAO.ClienteDAO;
import br.Teofilo.DAO.ContaDAO;
import br.Teofilo.DAO.DocumentoDAO;
import br.Teofilo.DAO.ProcessoDAO;
import br.Teofilo.DAO.TipoDocDAO;
import br.Teofilo.DAO.UserDAO;
import br.Teofilo.Utilidades.BackupJD;
import br.Teofilo.Utilidades.CadastrarUsuarioJD;
import funcoes.AES;
import funcoes.CDate;
import funcoes.Conv;
import funcoes.RSA;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.sql.Connection;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author User
 */
public class DocumentoJF extends javax.swing.JFrame {

    //public static final String PATH = "C:\\JCR\\";
    public static final String PATH = "res/";

    private User user;
    private boolean conectado = false;
    private List<Cliente> clientes;
    private DefaultListModel listClientes = new DefaultListModel();
    private DefaultListModel listProcessos = new DefaultListModel();
    private DefaultListModel listTipo = new DefaultListModel();
    private DefaultListModel listDocumentos = new DefaultListModel();
    private boolean btnPessoal = false;
    private ContasClienteJF contasjf;

    private String data_abertura_programa;

    private AtividadesJF atvJF = null;

    private boolean isRunning = false;

    private ChatJF chat = null;

    private PublicKey pk_public;
    private PrivateKey pk_private;

    /**
     * Creates new form DocumentoJF
     */
    public DocumentoJF() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        contasBtn = new javax.swing.JButton();
        contasBtn1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCliente = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDocumento = new javax.swing.JList<>();
        jLabelClientes = new javax.swing.JLabel();
        jLabelDocumentos = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        statustxt = new javax.swing.JTextField();
        modiftxt = new javax.swing.JFormattedTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListProcessos = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTipos = new javax.swing.JList<>();
        jLabelRelacionadoCliente = new javax.swing.JLabel();
        jLabelProcessos = new javax.swing.JLabel();
        jLabelTiposDocumentos = new javax.swing.JLabel();
        addProcessoBtn = new javax.swing.JButton();
        visualizarBtn = new javax.swing.JButton();
        uploadBtn = new javax.swing.JButton();
        downloadBtn = new javax.swing.JButton();
        editarBtn = new javax.swing.JButton();
        addTipoBtn = new javax.swing.JButton();
        changeStatusBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        abertoEmtxt = new javax.swing.JTextField();
        informtxt = new javax.swing.JLabel();
        processoBtn = new javax.swing.JButton();
        dadosPessoaisBtn = new javax.swing.JButton();
        cripLabel = new javax.swing.JLabel();
        tamlbl = new javax.swing.JLabel();
        gerenciarClientesBtn = new javax.swing.JButton();
        bckBtn = new javax.swing.JButton();
        renomearDocumentoBtn = new javax.swing.JButton();
        chatBtn = new javax.swing.JButton();
        keyPrivateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Advocacia Te√≥filo Rocha");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/logo-2-teofilo-rocha-advocacia-balneario-camboriu-sc-advogado.png"))); // NOI18N
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
        });

        contasBtn.setBackground(new java.awt.Color(0, 0, 0));
        contasBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        contasBtn.setForeground(new java.awt.Color(255, 255, 255));
        contasBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_local_atm_24px_white.png"))); // NOI18N
        contasBtn.setText("Contas");
        contasBtn.setBorder(null);
        contasBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contasBtnActionPerformed(evt);
            }
        });

        contasBtn1.setBackground(new java.awt.Color(0, 0, 0));
        contasBtn1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        contasBtn1.setForeground(new java.awt.Color(255, 255, 255));
        contasBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_style_24px_white.png"))); // NOI18N
        contasBtn1.setText("Atividades");
        contasBtn1.setBorder(null);
        contasBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contasBtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 403, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(contasBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contasBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(contasBtn)
                        .addComponent(contasBtn1))
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jListCliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListCliente);

        jListDocumento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDocumentoMouseClicked(evt);
            }
        });
        jListDocumento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListDocumentoKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jListDocumento);

        jLabelClientes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelClientes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelClientes.setText("Clientes");

        jLabelDocumentos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelDocumentos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDocumentos.setText("Documentos");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel6.setText("Status");

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel7.setText("Ult. Modifica√ß√£o");

        statustxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        statustxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        statustxt.setBorder(null);

        modiftxt.setBorder(null);
        try {
            modiftxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        modiftxt.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        modiftxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N

        jListProcessos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListProcessos.setToolTipText("Pressione DEL para remover o processo selecionado.");
        jListProcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListProcessosMouseClicked(evt);
            }
        });
        jListProcessos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListProcessosKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jListProcessos);

        jListTipos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTipos.setToolTipText("Pressione Del para remover a pasta selecionada.");
        jListTipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTiposMouseClicked(evt);
            }
        });
        jListTipos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jListTiposKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jListTipos);

        jLabelRelacionadoCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelRelacionadoCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRelacionadoCliente.setText("Relacionado ao Cliente");

        jLabelProcessos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelProcessos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProcessos.setText("Processos");

        jLabelTiposDocumentos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTiposDocumentos.setText("Tipos de Documentos");

        addProcessoBtn.setBackground(new java.awt.Color(255, 255, 255));
        addProcessoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        addProcessoBtn.setBorder(null);
        addProcessoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProcessoBtnActionPerformed(evt);
            }
        });

        visualizarBtn.setBackground(new java.awt.Color(255, 255, 255));
        visualizarBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        visualizarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/eye-19.png"))); // NOI18N
        visualizarBtn.setText("Visualizar");
        visualizarBtn.setBorder(null);
        visualizarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualizarBtnActionPerformed(evt);
            }
        });

        uploadBtn.setBackground(new java.awt.Color(255, 255, 255));
        uploadBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        uploadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-upload.png"))); // NOI18N
        uploadBtn.setText("Upload");
        uploadBtn.setBorder(null);
        uploadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadBtnActionPerformed(evt);
            }
        });

        downloadBtn.setBackground(new java.awt.Color(255, 255, 255));
        downloadBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        downloadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-download.png"))); // NOI18N
        downloadBtn.setText("Download");
        downloadBtn.setBorder(null);
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        editarBtn.setBackground(new java.awt.Color(255, 255, 255));
        editarBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        editarBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-upload.png"))); // NOI18N
        editarBtn.setText("Substituir");
        editarBtn.setBorder(null);
        editarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarBtnActionPerformed(evt);
            }
        });

        addTipoBtn.setBackground(new java.awt.Color(255, 255, 255));
        addTipoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        addTipoBtn.setBorder(null);
        addTipoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTipoBtnActionPerformed(evt);
            }
        });

        changeStatusBtn.setBackground(new java.awt.Color(255, 255, 255));
        changeStatusBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/bookmark-2.png"))); // NOI18N
        changeStatusBtn.setBorder(null);
        changeStatusBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeStatusBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_delete_24px.png"))); // NOI18N
        deleteBtn.setText("Deletar");
        deleteBtn.setBorder(null);
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel8.setText("Aberto em");

        abertoEmtxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        abertoEmtxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        abertoEmtxt.setBorder(null);

        processoBtn.setBackground(new java.awt.Color(255, 255, 255));
        processoBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        processoBtn.setText("Processos");
        processoBtn.setBorder(null);
        processoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processoBtnActionPerformed(evt);
            }
        });

        dadosPessoaisBtn.setBackground(new java.awt.Color(255, 255, 255));
        dadosPessoaisBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dadosPessoaisBtn.setText("Dados Pessoais");
        dadosPessoaisBtn.setBorder(null);
        dadosPessoaisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dadosPessoaisBtnActionPerformed(evt);
            }
        });

        cripLabel.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        cripLabel.setForeground(new java.awt.Color(51, 204, 0));

        tamlbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tamlbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        gerenciarClientesBtn.setBackground(new java.awt.Color(255, 255, 255));
        gerenciarClientesBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_person_add_24px.png"))); // NOI18N
        gerenciarClientesBtn.setBorder(null);
        gerenciarClientesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gerenciarClientesBtnActionPerformed(evt);
            }
        });

        bckBtn.setBackground(new java.awt.Color(255, 255, 255));
        bckBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_backup_24px.png"))); // NOI18N
        bckBtn.setBorder(null);
        bckBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bckBtnActionPerformed(evt);
            }
        });

        renomearDocumentoBtn.setBackground(new java.awt.Color(255, 255, 255));
        renomearDocumentoBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        renomearDocumentoBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/pencil.png"))); // NOI18N
        renomearDocumentoBtn.setText("Renomear");
        renomearDocumentoBtn.setBorder(null);
        renomearDocumentoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                renomearDocumentoBtnActionPerformed(evt);
            }
        });

        chatBtn.setBackground(new java.awt.Color(255, 255, 255));
        chatBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_forum_24px.png"))); // NOI18N
        chatBtn.setBorder(null);
        chatBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chatBtnActionPerformed(evt);
            }
        });

        keyPrivateBtn.setBackground(new java.awt.Color(255, 255, 255));
        keyPrivateBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/key-26.png"))); // NOI18N
        keyPrivateBtn.setToolTipText("Descarregar Chave Privada");
        keyPrivateBtn.setBorder(null);
        keyPrivateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                keyPrivateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(gerenciarClientesBtn)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jLabelClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(bckBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chatBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelRelacionadoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelProcessos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTiposDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(addProcessoBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(changeStatusBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(processoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dadosPessoaisBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(abertoEmtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE)
                            .addComponent(jLabelDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(addTipoBtn, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(visualizarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(230, 230, 230))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(downloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(editarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(informtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(keyPrivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(renomearDocumentoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(cripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tamlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(16, 16, 16))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabelClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelDocumentos)
                            .addComponent(jLabelRelacionadoCliente)))
                    .addComponent(gerenciarClientesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(processoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(dadosPessoaisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19)
                                .addComponent(jLabelProcessos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(changeStatusBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(addProcessoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(abertoEmtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabelTiposDocumentos)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addTipoBtn)
                            .addComponent(bckBtn)
                            .addComponent(chatBtn))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel7)
                                .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(informtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(visualizarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(downloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uploadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(editarBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tamlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(renomearDocumentoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                            .addComponent(cripLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(keyPrivateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
    }//GEN-LAST:event_jPanel2MousePressed

    private void jListClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClienteMouseClicked
        statustxt.setText("");
        modiftxt.setText("");
        abertoEmtxt.setText("");
        limparListas();
    }//GEN-LAST:event_jListClienteMouseClicked

    private void jListDocumentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDocumentoMouseClicked
        if (evt.getClickCount() == 2) {
            visualizarArquivo();
        }
        atualizarInfos();
    }//GEN-LAST:event_jListDocumentoMouseClicked

    private void jListProcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListProcessosMouseClicked
        statusDoProcesso();
        carregarDocumentosDoProcessoSelecionado();
    }//GEN-LAST:event_jListProcessosMouseClicked

    private void jListTiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTiposMouseClicked
        statustxt.setText("");
        modiftxt.setText("");
        abertoEmtxt.setText("");
        carregarDocumentosDoTipoEProcessoSelecionado();
    }//GEN-LAST:event_jListTiposMouseClicked

    private void visualizarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualizarBtnActionPerformed
        visualizarArquivo();
    }//GEN-LAST:event_visualizarBtnActionPerformed

    private void uploadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadBtnActionPerformed
        upload();
    }//GEN-LAST:event_uploadBtnActionPerformed

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        download();
    }//GEN-LAST:event_downloadBtnActionPerformed

    private void editarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarBtnActionPerformed
        editar();
    }//GEN-LAST:event_editarBtnActionPerformed

    private void addProcessoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProcessoBtnActionPerformed
        addProcesso();
    }//GEN-LAST:event_addProcessoBtnActionPerformed

    private void addTipoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTipoBtnActionPerformed
        addTipoDocumento();
    }//GEN-LAST:event_addTipoBtnActionPerformed

    private void changeStatusBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeStatusBtnActionPerformed
        editarStatusDeProcesso();
    }//GEN-LAST:event_changeStatusBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        deletarDocumento();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void processoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processoBtnActionPerformed
        if (jListCliente.getSelectedIndex() < 0) {
            return;
        }
        limparListas();
        carregarProcessosDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
        btnPessoal = false;
    }//GEN-LAST:event_processoBtnActionPerformed

    private void dadosPessoaisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dadosPessoaisBtnActionPerformed
        if (jListCliente.getSelectedIndex() < 0) {
            return;
        }
        limparListas();
        carregarDadosPessoaisDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
        btnPessoal = true;
    }//GEN-LAST:event_dadosPessoaisBtnActionPerformed

    private void jListProcessosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListProcessosKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removerProcesso();
        }
    }//GEN-LAST:event_jListProcessosKeyPressed

    private void gerenciarClientesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gerenciarClientesBtnActionPerformed
        gerenciarClientes();
    }//GEN-LAST:event_gerenciarClientesBtnActionPerformed

    private void jListTiposKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListTiposKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            removerTipoDeDocumento();
        }
    }//GEN-LAST:event_jListTiposKeyPressed

    private void contasBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contasBtnActionPerformed
        if (conectado) {
            contasjf = new ContasClienteJF();
            contasjf.setVisible(true);
        }
    }//GEN-LAST:event_contasBtnActionPerformed

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        if (evt.getClickCount() == 2) {
            try {
                Desktop.getDesktop().browse(new URI("https://www.teofilorocha.adv.br/"));
            } catch (URISyntaxException | IOException ex) {
                Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jLabel13MouseClicked

    private void bckBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bckBtnActionPerformed
        new BackupJD(null, true).setVisible(true);
    }//GEN-LAST:event_bckBtnActionPerformed

    private void contasBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contasBtn1ActionPerformed
        atividades();
    }//GEN-LAST:event_contasBtn1ActionPerformed

    private void renomearDocumentoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_renomearDocumentoBtnActionPerformed
        renomearDoc();
    }//GEN-LAST:event_renomearDocumentoBtnActionPerformed

    private void jListDocumentoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListDocumentoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            deletarDocumento();
        }
    }//GEN-LAST:event_jListDocumentoKeyPressed

    private void chatBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chatBtnActionPerformed
        chat();
    }//GEN-LAST:event_chatBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        isRunning = false;
        System.out.println("\nisRunning = false;");
    }//GEN-LAST:event_formWindowClosing

    private void keyPrivateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_keyPrivateBtnActionPerformed
        pk_private = null;
        keyPrivateBtn.setBackground(Color.WHITE);
    }//GEN-LAST:event_keyPrivateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocumentoJF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField abertoEmtxt;
    private javax.swing.JButton addProcessoBtn;
    private javax.swing.JButton addTipoBtn;
    private javax.swing.JButton bckBtn;
    private javax.swing.JButton changeStatusBtn;
    private javax.swing.JButton chatBtn;
    private javax.swing.JButton contasBtn;
    private javax.swing.JButton contasBtn1;
    private javax.swing.JLabel cripLabel;
    private javax.swing.JButton dadosPessoaisBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JButton editarBtn;
    private javax.swing.JButton gerenciarClientesBtn;
    private javax.swing.JLabel informtxt;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelClientes;
    private javax.swing.JLabel jLabelDocumentos;
    private javax.swing.JLabel jLabelProcessos;
    private javax.swing.JLabel jLabelRelacionadoCliente;
    private javax.swing.JLabel jLabelTiposDocumentos;
    private javax.swing.JList<String> jListCliente;
    private javax.swing.JList<String> jListDocumento;
    private javax.swing.JList<String> jListProcessos;
    private javax.swing.JList<String> jListTipos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton keyPrivateBtn;
    private javax.swing.JFormattedTextField modiftxt;
    private javax.swing.JButton processoBtn;
    private javax.swing.JButton renomearDocumentoBtn;
    private javax.swing.JTextField statustxt;
    private javax.swing.JLabel tamlbl;
    private javax.swing.JButton uploadBtn;
    private javax.swing.JButton visualizarBtn;
    // End of variables declaration//GEN-END:variables

    private void init() {
        this.setExtendedState(DocumentoJF.MAXIMIZED_BOTH);
        try {
            URL url = this.getClass().getResource("/br/Teofilo/IMG/icon.png");
            Image imagemTitulo = Toolkit.getDefaultToolkit().getImage(url);
            this.setIconImage(imagemTitulo);
        } catch (Exception e) {
            GerarLogErro.gerar("Icone n√£o pode ser carregado devido a um erro.\n" + e.getMessage());
        }
        data_abertura_programa = CDate.DataPTBRAtual();
        testarConexao();
        if (conectado) {
            isRunning = true;
            verificar_user();
            jListCliente.setModel(listClientes);
            jListDocumento.setModel(listDocumentos);
            jListProcessos.setModel(listProcessos);
            jListTipos.setModel(listTipo);
            popularListClientes();
            initJFramesAux();
            /*
                funcoes obtidas pelo "param.txt"
             */
            verificarParamTXT();
            verificarDiaPassado();
            pk_public = KeyController.carregarKey();
        }

    }

    private void popularListClientes() {
        new Thread(() -> {
            listClientes.removeAllElements();
            jLabelClientes.setForeground(Color.BLUE);
            jLabelClientes.setText("Clientes [carregando]");
            clientes = new ClienteDAO().getClintes();
            clientes.forEach((c) -> {
                if (c.isAtivo()) {
                    listClientes.addElement(c);
                }
            });
            jLabelClientes.setForeground(Color.BLACK);
            jLabelClientes.setText("Clientes");
        }).start();
    }

    private synchronized void carregarProcessosDoClienteSelecionado(Cliente c) {
        /*as Threads estavam dando problemas*/
        //new Thread(() -> {
        jLabelProcessos.setForeground(Color.BLUE);
        jLabelProcessos.setText("Processos [carregando]");
        listProcessos.removeAllElements();
        List<Processo> processos = new ProcessoDAO().getProcessos(c.getId());
        processos.forEach((p) -> {
            listProcessos.addElement(p);
        });
        jLabelProcessos.setForeground(Color.BLACK);
        jLabelProcessos.setText("Processos");
        //}).start();
    }

    private synchronized void carregarDadosPessoaisDoClienteSelecionado(Cliente c) {
        /*as Threads estavam dando problemas*/
        //new Thread(() -> {
        jLabelDocumentos.setForeground(Color.BLUE);
        jLabelDocumentos.setText("Documentos [carregando]");
        listDocumentos.removeAllElements();
        List<DocumentoPessoal> docuemnto_pessoal = new DocumentoDAO().getDocumentosPessoais(c.getId());
        docuemnto_pessoal.forEach((d) -> {
            listDocumentos.addElement(d);
        });
        jLabelDocumentos.setForeground(Color.BLACK);
        jLabelDocumentos.setText("Documentos");
        //}).start();
    }

    private void limparListas() {
        listDocumentos.removeAllElements();
        listProcessos.removeAllElements();
        listTipo.removeAllElements();
    }

    private synchronized void visualizarArquivo() {
        if (listDocumentos.isEmpty()) {
            return;
        }
        if (jListDocumento.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(null, "Selecione apenas um arquivo por vez para visualizar.");
            return;
        }
        if (jListDocumento.getSelectedIndex() < 0) {
            return;
        }
        new Thread(() -> {
            informtxt.setText("Carregando..");
            informtxt.setForeground(Color.red);
            Arquivo arquivo = null;
            File file = null;
            File file_temp = null;
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
                arquivo = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                if (arquivo.isCrip()) {
                    if (pk_private == null) {
                        pk_private = KeyController.getPrivateKey();
                        if (pk_private == null) {
                            JOptionPane.showMessageDialog(null, "Arquivo criptografado, para baixa-lo selecione a chave privada.");
                            informtxt.setText("");
                            return;
                        }
                        keyPrivateBtn.setBackground(Color.GREEN);
                    } else {
                        keyPrivateBtn.setBackground(Color.GREEN);
                    }
                    byte[] chaveAES = arquivo.getCrip2();
                    String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                    chaveAES = AES.hexStringToByteArray(chaveAES_String);
                    SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                    //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: " + AES.bytesToHex(AES_KEY.getEncoded()));
                    file = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\", "documentos");
                    file_temp = AES.decrypt(file.getPath(), PATH + "JCR LOG\\decrip" + file.getName(), AES_KEY, true);
                } else {
                    file_temp = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\", "documentos");
                }
                file.deleteOnExit();
                file_temp.deleteOnExit();
                //file = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\", "documentos");
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                arquivo = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                if (arquivo.isCrip()) {
                    if (pk_private == null) {
                        pk_private = KeyController.getPrivateKey();
                        if (pk_private == null) {
                            JOptionPane.showMessageDialog(null, "Arquivo criptografado, para baixa-lo selecione a chave privada.");
                            informtxt.setText("");
                            return;
                        }
                        keyPrivateBtn.setBackground(Color.GREEN);
                    } else {
                        keyPrivateBtn.setBackground(Color.GREEN);
                    }
                    byte[] chaveAES = arquivo.getCrip2();
                    String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                    chaveAES = AES.hexStringToByteArray(chaveAES_String);
                    SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                    //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: " + AES.bytesToHex(AES_KEY.getEncoded()));
                    file = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\CRIP\\", "documentos_pessoais");
                    file_temp = AES.decrypt(file.getPath(), PATH + "JCR LOG\\" + file.getName(), AES_KEY, true);
                } else {
                    file_temp = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\", "documentos_pessoais");
                }
                file.deleteOnExit();
                file_temp.deleteOnExit();
                //file = new DocumentoDAO().getArquivo(arquivo.getId(), PATH + "JCR LOG\\", "documentos_pessoais");
            }
            if (file_temp != null) {
                try {
                    Desktop.getDesktop().open(file_temp);
                } catch (IOException ex) {
                    Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                    GerarLogErro.gerar("Tentando visualizar um arquivo." + ex.getMessage());
                    JOptionPane.showMessageDialog(null, "N√£o h√° aplicativos associados ao arquivo especificado para esta opera√ß√£o..", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            informtxt.setText("");
        }).start();
    }

    private void upload() {
        if (jListCliente.getSelectedIndices().length == 0) {
            JOptionPane.showMessageDialog(this, "Sem cliente selecionado", "Cliente", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        if (jListCliente.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(this, "Selecione apenas um cliente", "Cliente", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        Cliente cliente = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        Arquivo arquivo = null;
        Processo processo = null;
        TipoDoc sub_pasta = null;
        try {
            if (!btnPessoal) { //processo
                try {
                    processo = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem processo selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Processo", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                try {
                    sub_pasta = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem tipo de documento selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Tipo de Documento", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } else if (btnPessoal) { //dados pessoais
                arquivo = new DocumentoPessoal();
                arquivo.setID_CLIENTE(cliente.getId());
            }
        } catch (HeadlessException ex) {
            JOptionPane.showMessageDialog(this, ex, "Erro", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        UploadJD jd = new UploadJD(null, true, cliente, sub_pasta, arquivo, processo, pk_public);
        jd.setVisible(true);
    }

    private synchronized void download() {
        if (listDocumentos.isEmpty() || jListDocumento.getSelectedIndices().length == 0) {
            return;
        }
        new Thread(() -> {
            //desabilitei o botao de download enquanto realiza um download para n√£o acontecer te clicar para baixar duas vezes
            downloadBtn.setEnabled(false);
            informtxt.setText("Baixando...");
            informtxt.setForeground(Color.red);
            File file = null;
            File file_temp = null;
            
            ////////////////////////////////
            Arquivo[] arquives = new Arquivo[jListDocumento.getSelectedIndices().length];
            for (int x = 0; x < arquives.length; x++) {
                arquives[x] = (Arquivo) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
            }
            String tabela_banco;
            if (arquives[0] instanceof Documento) {
                tabela_banco = "documentos";
            } else if (arquives[0] instanceof DocumentoPessoal) {
                tabela_banco = "documentos_pessoais";
            }

            ///////////////////////////////////
            
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[0]) instanceof Documento) {
                Documento[] d = new Documento[jListDocumento.getSelectedIndices().length];
                //dividido em 2 for, um para carregamento r√°pido dos selecionados, e outro para efetuar o download
                //como √© uma thread, acaba deixando livre para o usu√°rio desselecionar os documentos, isso altera o getSelectedIndices
                //por isso o primeiro for pega rapidamente essas referencias enquanto o segundo s√≥ baixa(e √© um pouco mais demorado)
                for (int x = 0; x < d.length; x++) {
                    d[x] = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                }
                /*
                    inicio verifica√ß√£o de criptografia
                 */
                for (Documento doc : d) {
                    if (doc.isCrip()) {
                        if (pk_private == null) {
                            pk_private = KeyController.getPrivateKey();
                            if (pk_private == null) {
                                JOptionPane.showMessageDialog(null, "Arquivo criptografado, para baixa-lo selecione a chave privada.");
                                downloadBtn.setEnabled(true);
                                informtxt.setText("");
                                return;
                            }
                            keyPrivateBtn.setBackground(Color.GREEN);
                        } else {
                            keyPrivateBtn.setBackground(Color.GREEN);
                        }
                        /* chave RSA privada ja esta carregada
                             1* descriptografar chave aes vinda do banco (a chave vai ta em HEXA)
                             2* descriptografar o arquivo com a chave aes
                         */
                        byte[] chaveAES = doc.getCrip2();
                        String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                        chaveAES = AES.hexStringToByteArray(chaveAES_String);
                        SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                        //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: "+AES.bytesToHex(AES_KEY.getEncoded()));
                        file = new DocumentoDAO().getArquivo(doc.getId(), PATH + "JCR LOG\\CRIP\\", "documentos");
                        file_temp = AES.decrypt(file.getPath(), file.getAbsoluteFile().getParent() + "\\Download\\" + file.getName(), AES_KEY, true);
                    } else { //doc nao criptografado
                        file_temp = new DocumentoDAO().getArquivo(doc.getId(), PATH + "JCR LOG\\CRIP\\Download", "documentos");
                    }
                    file.deleteOnExit();
                    try {
                        Runtime.getRuntime().exec("explorer " + file_temp.getAbsoluteFile().getParent());
                    } catch (IOException e) {
                        System.err.println(e);
                    }
                }
                /*
                    fim verifica√ß√£o de criptografia
                 */
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                DocumentoPessoal[] dp = new DocumentoPessoal[jListDocumento.getSelectedIndices().length];
                //dividido em 2 for, um para carregamento r√°pido dos selecionados, e outro para efetuar o download
                //como √© uma thread, acaba deixando livre para o usu√°rio desselecionar os documentos, isso altera o getSelectedIndices
                //por isso o primeiro for pega rapidamente essas referencias enquanto o segundo s√≥ baixa(e √© um pouco mais demorado)
                for (int x = 0; x < dp.length; x++) {
                    dp[x] = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                }
                for (DocumentoPessoal doc : dp) {
                    if (doc.isCrip()) {
                        if (pk_private == null) {
                            pk_private = KeyController.getPrivateKey();
                            if (pk_private == null) {
                                JOptionPane.showMessageDialog(null, "Arquivo criptografado, para baixa-lo selecione a chave privada.");
                                downloadBtn.setEnabled(true);
                                informtxt.setText("");
                                return;
                            }
                            keyPrivateBtn.setBackground(Color.GREEN);
                        } else {
                            keyPrivateBtn.setBackground(Color.GREEN);
                        }
                        /* chave RSA privada ja esta carregada
                             1* descriptografar chave aes vinda do banco (a chave vai ta em HEXA)
                             2* descriptografar o arquivo com a chave aes
                         */
                        byte[] chaveAES = doc.getCrip2();
                        String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                        chaveAES = AES.hexStringToByteArray(chaveAES_String);
                        SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                        //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: " + AES.bytesToHex(AES_KEY.getEncoded()));
                        file = new DocumentoDAO().getArquivo(doc.getId(), PATH + "JCR LOG\\CRIP\\", "documentos_pessoais");
                        file_temp = AES.decrypt(file.getPath(), file.getAbsoluteFile().getParent() + "\\Download\\" + file.getName(), AES_KEY, true);
                    } else {
                        file_temp = new DocumentoDAO().getArquivo(doc.getId(), PATH + "JCR LOG\\CRIP\\", "documentos_pessoais");
                    }
                    file.deleteOnExit();
                    try {
                        Runtime.getRuntime().exec("explorer " + file_temp.getAbsoluteFile().getParent());
                    } catch (IOException e) {
                        System.err.println(e);
                    }
                }
            }
            downloadBtn.setEnabled(true);
            informtxt.setText("");
        }).start();

    }

    private void atualizarInfos() {
        if (listDocumentos.isEmpty()) {
            return;
        }
        if (jListDocumento.getSelectedIndices().length == 1) { //se for somente um item exibe mais informa√ß√µes
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
                Documento d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                if (d.isCrip()) {
                    cripLabel.setText("Criptografado.");
                } else {
                    cripLabel.setText("");
                }
                if (d.getTamanho() == 0) {
                    JOptionPane.showMessageDialog(null, "Atualizando tamanho dos arquivos no banco de dados.. aguarde..");
                    new DocumentoDAO().ifNotExistTam();
                    JOptionPane.showMessageDialog(null, "Concluido!");
                    jListTiposMouseClicked(null);
                    return;
                }
                tamlbl.setText(Conv.CDblDuasCasas((d.getTamanho() / 1024) / 1024) + "MB");
                statustxt.setText(d.getStatus());
                modiftxt.setText(d.getAlteracao());
                abertoEmtxt.setText("");
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                DocumentoPessoal dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                if (dp.isCrip()) {
                    cripLabel.setText("Criptografado.");
                } else {
                    cripLabel.setText("");
                }
                if (dp.getTamanho() == 0) {
                    JOptionPane.showMessageDialog(null, "Atualizando tamanho dos arquivos no banco de dados.. aguarde..");
                    new DocumentoDAO().ifNotExistTam();
                    JOptionPane.showMessageDialog(null, "Concluido!");
                    dadosPessoaisBtnActionPerformed(null);
                    return;
                }
                tamlbl.setText(Conv.CDblDuasCasas((dp.getTamanho() / 1024) / 1024) + "MB");
                statustxt.setText("");
                modiftxt.setText(dp.getAlteracao());
                abertoEmtxt.setText("");
            }
        } else { //se forem varios itens mostra a soma em MB deles somente.
            statustxt.setText("");
            modiftxt.setText("");
            abertoEmtxt.setText("");
            cripLabel.setText("");
            tamlbl.setText("");
            Documento d;
            DocumentoPessoal dp;
            double tam = 0;
            if (listDocumentos.getElementAt(0) instanceof Documento) {
                for (int x = 0; x < jListDocumento.getSelectedIndices().length; x++) {
                    d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                    tam += d.getTamanho();
                }
            } else {
                for (int x = 0; x < jListDocumento.getSelectedIndices().length; x++) {
                    dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                    tam += dp.getTamanho();
                }
            }
            tamlbl.setText(Conv.CDblDuasCasas((tam / 1024) / 1024) + "MB");
        }
    }

    private void editar() {
        if (jListDocumento.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(null, "Edite um documento por vez.");
            return;
        }
        if (jListDocumento.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um documento para editar.");
            return;
        }
        if (pk_public == null) {
            JOptionPane.showMessageDialog(null, "Chave publica n√£o carregada.");
            pk_public = KeyController.getPublicKey();
            if (pk_public == null) {
                JOptionPane.showMessageDialog(null, "Abortando.. A falta de uma chave publica deixa vulner√°vel o arquivo no banco de dados.");
                return;
            }
        }
        Arquivo arquivo = null;
        TipoDoc tp = null;
        Processo p = null;
        Cliente c = null;
        if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
            try {
                arquivo = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                tp = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            } catch (HeadlessException ex) {
                System.err.println("Editar>> Documento, tipoDoc ou Processo retornaram erro.." + ex);
            }
        } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
            try {
                arquivo = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            } catch (HeadlessException ex) {
                System.err.println("Editar>>DocumentoPessoal ou Cliente retornaram erro.." + ex);
            }
        }
        if (arquivo != null) {
            JFileChooser fl = new JFileChooser();
            fl.setDialogTitle("Selecionar arquivo");
            fl.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int op = fl.showOpenDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                File file = fl.getSelectedFile();
                SecretKey aesKey = AES.gerarChave(256);
                file = AES.encrypt(file.getPath(), PATH + "JCR LOG\\CRIP\\" + file.getName(), aesKey);
                byte[] aes = RSA.criptografa(AES.bytesToHex(aesKey.getEncoded()), pk_public);
                if (arquivo instanceof Documento) {
                    if (!new DocumentoDAO().updateDocumento(file, arquivo.getId(), tp.getId(), p.getId(), aes)) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    carregarDocumentosDoTipoEProcessoSelecionado();
                } else if (arquivo instanceof DocumentoPessoal) {
                    if (!new DocumentoDAO().updateDocumentoPessoal(file, arquivo.getId(), aes)) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    }
                    carregarDadosPessoaisDoClienteSelecionado(c);
                }
            }
        }
    }

    private synchronized void carregarDocumentosDoProcessoSelecionado() {
        new Thread(() -> {
            jLabelTiposDocumentos.setForeground(Color.BLUE);
            jLabelTiposDocumentos.setText("Tipos de Documentos [carregando]");
            Cliente c;
            try {
                c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            } catch (Exception e) {
                System.err.println("carregarDocumentosDoProcessoSelecionado>>Sem cliente selecionado.");
                GerarLogErro.gerar("carregarDocumentosDoProcessoSelecionado>>Sem cliente selecionado.\n" + e.getMessage());
                return;
            }
            Processo p;
            try {
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            } catch (Exception e) {
                System.err.println("carregarDocumentosDoProcessoSelecionado>>Sem processo selecionado.");
                GerarLogErro.gerar("carregarDocumentosDoProcessoSelecionado>>Sem processo selecionado.\n" + e.getMessage());
                return;
            }
            listTipo.removeAllElements();
            listDocumentos.removeAllElements();
            if (!listProcessos.isEmpty()) {
                List<TipoDoc> tiposDeDocumentos = new TipoDocDAO().findAllByClienteEProcesso(c, p);
                for (TipoDoc t : tiposDeDocumentos) {
                    listTipo.addElement(t);
                }
            }
            jLabelTiposDocumentos.setForeground(Color.BLACK);
            jLabelTiposDocumentos.setText("Tipos de Documentos");
        }).start();
    }

    private synchronized void carregarDocumentosDoTipoEProcessoSelecionado() {
        new Thread(() -> {
            jLabelDocumentos.setForeground(Color.BLUE);
            jLabelDocumentos.setText("Documentos [carregando]");
            listDocumentos.removeAllElements();
            if (listTipo.isEmpty()) {
                return;
            }
            try {
                Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
                Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                TipoDoc t = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                List<Documento> documentos = new DocumentoDAO().getDocumentosDeProcessoETipo(c.getId(), p.getId(), t.getId());
                documentos.forEach((d) -> {
                    listDocumentos.addElement(d);
                });
            } catch (Exception ex) {
                System.err.println(ex);
            }
            jLabelDocumentos.setForeground(Color.BLACK);
            jLabelDocumentos.setText("Documentos");
        }).start();
    }

    private void addProcesso() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            NovoProcessoJD jd = new NovoProcessoJD(null, true, c);
            jd.setVisible(true);
            processoBtnActionPerformed(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Sem cliente selecionado.\n" + ex, "Erro", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addTipoDocumento() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            NovoTipoDocJD jd = new NovoTipoDocJD(null, true, c, p);
            jd.setVisible(true);
            carregarDocumentosDoProcessoSelecionado();
        } catch (Exception ex) {
            System.out.println("Sem processo selecionado." + ex);
        }
    }

    private void statusDoProcesso() {
        if (!listProcessos.isEmpty()) {
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            statustxt.setText(p.getStatus());
            abertoEmtxt.setText(p.getData());
            modiftxt.setText("");
        }
    }

    private void editarStatusDeProcesso() {
        if (!listProcessos.isEmpty()) {
            Processo p;
            try {
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                StatusProcessoJD jd = new StatusProcessoJD(null, true, p);
                jd.setVisible(true);
                statustxt.setText("");
                Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
                carregarProcessosDoClienteSelecionado(c);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Sem processo selecionado.", "Status Processo", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private synchronized void deletarDocumento() {
        if (jListDocumento.getSelectedIndices().length == 0) {
            return;
        }
        int op = JOptionPane.showOptionDialog(null, "Deseja realmente excluir esse(s) arquivo(s)?", "Confirma√ß√£o de exclus√£o", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
        if (op == JOptionPane.YES_OPTION) {
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[0]) instanceof Documento) {
                Documento[] arquivo = new Documento[jListDocumento.getSelectedIndices().length];
                for (int x = 0; x < arquivo.length; x++) {
                    arquivo[x] = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                }
                for (int x = 0; x < arquivo.length; x++) {
                    //descriptografar
                    File f = null;
                    File f_temp;
                    if (arquivo[x].isCrip()) {
                        if (pk_private == null) {
                            pk_private = KeyController.getPrivateKey();
                            if (pk_private == null) {
                                JOptionPane.showMessageDialog(null, "Arquivo criptografado, para remove-lo √© necess√°rio ter a chave para descriptograf√°-lo.\n.");
                                informtxt.setText("");
                                return;
                            }
                            keyPrivateBtn.setBackground(Color.GREEN);
                        } else {
                            keyPrivateBtn.setBackground(Color.GREEN);
                        }
                        byte[] chaveAES = arquivo[x].getCrip2();
                        String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                        chaveAES = AES.hexStringToByteArray(chaveAES_String);
                        SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                        //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: " + AES.bytesToHex(AES_KEY.getEncoded()));
                        f = new DocumentoDAO().getArquivo(arquivo[x].getId(), PATH + "JCR LOG\\", "documentos");
                        f_temp = AES.decrypt(f.getPath(), PATH + "JCR LOG\\decrip" + f.getName(), AES_KEY, true);
                    } else {
                        f_temp = new DocumentoDAO().getArquivo(arquivo[x].getId(), PATH + "JCR LOG\\", "documentos");
                    }
                    f.delete();
                    boolean moveToTrash = Desktop.getDesktop().moveToTrash(f_temp);
                    if (moveToTrash) {
                        if (!new DocumentoDAO().removeDocumento(arquivo[x])) {
                            JOptionPane.showMessageDialog(null, "Erro ao tentar remover o documento do Bando de Dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                        f_temp.delete();
                    }
                }
                carregarDocumentosDoTipoEProcessoSelecionado();
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[0]) instanceof DocumentoPessoal) {
                DocumentoPessoal[] arquivo = new DocumentoPessoal[jListDocumento.getSelectedIndices().length];
                for (int x = 0; x < arquivo.length; x++) {
                    arquivo[x] = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                }
                for (int x = 0; x < arquivo.length; x++) {
                    //descriptografar

                    File f = null;
                    File f_temp;
                    if (arquivo[x].isCrip()) {
                        if (pk_private == null) {
                            pk_private = KeyController.getPrivateKey();
                            if (pk_private == null) {
                                JOptionPane.showMessageDialog(null, "Arquivo criptografado, para remove-lo √© necess√°rio ter a chave para descriptograf√°-lo.\n.");
                                informtxt.setText("");
                                return;
                            }
                            keyPrivateBtn.setBackground(Color.GREEN);
                        } else {
                            keyPrivateBtn.setBackground(Color.GREEN);
                        }
                        byte[] chaveAES = arquivo[x].getCrip2();
                        String chaveAES_String = RSA.decriptografa(chaveAES, pk_private);
                        chaveAES = AES.hexStringToByteArray(chaveAES_String);
                        SecretKey AES_KEY = new SecretKeySpec(chaveAES, "AES");
                        //System.out.println("CHAVE AES CAPTURADA EM FORMATO HEXA: " + AES.bytesToHex(AES_KEY.getEncoded()));
                        f = new DocumentoDAO().getArquivo(arquivo[x].getId(), PATH + "JCR LOG\\", "documentos_pessoais");
                        f_temp = AES.decrypt(f.getPath(), PATH + "JCR LOG\\decrip" + f.getName(), AES_KEY, true);
                    } else {
                        f_temp = new DocumentoDAO().getArquivo(arquivo[x].getId(), PATH + "JCR LOG\\", "documentos_pessoais");
                    }
                    f.delete();
                    boolean moveToTrash = Desktop.getDesktop().moveToTrash(f_temp);
                    if (moveToTrash) {
                        if (!new DocumentoDAO().removeDocumentoPessoal(arquivo[x])) {
                            JOptionPane.showMessageDialog(null, "Erro ao tentar remover o documento do Bando de Dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    f_temp.delete();
                }
                carregarDadosPessoaisDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
            }
        }
    }

    private void removerProcesso() {
        if (listTipo.isEmpty()) {
            if (jListProcessos.getSelectedIndex() >= 0) {
                int op = JOptionPane.showOptionDialog(null, "Deseja realmente excluir esse processo?", "Confirma√ß√£o de exclus√£o", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
                if (op == JOptionPane.YES_OPTION) {
                    if (!new DocumentoDAO().removerProcesso((Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex()))) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar remover o processo selecioado.");
                    } else {
                        processoBtnActionPerformed(null);
                    }
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Ainda existem documentos associados a esse processo.");
        }
    }

    private void gerenciarClientes() {
        new ClienteJD(null, true).setVisible(true);
        popularListClientes();
    }

    private void testarConexao() {
        Connection con = null;
        try {
            con = ConnectionFactoryMySQL.getConnection();
            conectado = true;
        } catch (Exception e) {
            this.setTitle(this.getTitle() + "  ## DESCONECTADO ##");
        } finally {
            ConnectionFactoryMySQL.closeConnection(con);
        }
    }

    private synchronized void verificar_cartao() {
        new Thread(() -> {
            if (new ContaDAO().controleCartao()) {
                if (new ContaDAO().baixarCartoesHoje()) {
                    if (!new ContaDAO().CartaoHojeConcluido()) {
                        JOptionPane.showMessageDialog(null, "Erro ao informar o banco de dados que hoje ja foi feita a verifica√ß√£o dos cart√µes.", "Erro", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Problema ao tentar dar baixa nos cart√µes que vencem hoje!", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }).start();
    }

    private void verificar_user() {
        user = new UserDAO().getUser();
        if (user == null) {
            cadastrar_Usuario();
            user = new UserDAO().getUser();
            if (user == null) {
                System.exit(0);
            } else {
                this.setTitle(this.getTitle() + " |" + user.getNome() + "|");
            }
        } else {
            this.setTitle(this.getTitle() + " |" + user.getNome() + "|");
        }
    }

    private void cadastrar_Usuario() {
        CadastrarUsuarioJD jd = new CadastrarUsuarioJD(null, true);
        jd.setVisible(true);
    }

    private void removerTipoDeDocumento() {
        if (jListTipos.getSelectedIndex() < 0) {
            return;
        }
        if (!listDocumentos.isEmpty()) {
            int op1 = JOptionPane.showOptionDialog(null, "Existem documentos vinculados a esse tipo, deseja realmente excluir todos?", "Confirma√ß√£o de exclus√£o", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
            if (op1 == JOptionPane.YES_OPTION) {
                if (new DocumentoDAO().removerTipoDeDocumento((TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex()))) {
                    processoBtnActionPerformed(null);
                } else {
                    JOptionPane.showMessageDialog(null, "Erro ao tentar realizar a a√ß√£o.");
                }
            }
        }
    }

    private synchronized void atividades() {
        new Thread(() -> {
            if (!atvJF.isVisible()) {
                atvJF.init();
                atvJF.setVisible(true);
            }
        }).start();
    }

    private void renomearDoc() {
        if (jListDocumento.getSelectedIndex() < 0) {
            return;
        }
        if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
            renomearDocumentoSelecionado((Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex()));
        } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
            renomearDocumentoPessoalSelecionado((DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex()));
        }
    }

    private void renomearDocumentoSelecionado(Documento documento) {
        String nova = JOptionPane.showInputDialog(null, "Novo descri√ß√£o", "Renomear Arquivo", JOptionPane.QUESTION_MESSAGE);
        if (nova == null) {
            return;
        } else if (nova.equals("")) {
            return;
        }
        /*
            renomeia o arquivo mas mantem a extens√£o
         */
        //System.out.println(nova+obterExtensaoDoAquivo(documento.getNome()));
        if (new DocumentoDAO().renomearDocumento(documento.getId(), nova + Arquivo.obterExtensaoDoAquivo(documento.getNome()))) {
            jListTiposMouseClicked(null); //atualiza os documentos de novo
        } else {
            JOptionPane.showMessageDialog(null, "Ocorreu um problema ao tentar renomear o arquivo no Banco de Dados.");
        }
    }

    private void renomearDocumentoPessoalSelecionado(DocumentoPessoal documentoPessoal) {
        String nova = JOptionPane.showInputDialog(null, "Novo descri√ß√£o", "Renomear Arquivo", JOptionPane.QUESTION_MESSAGE);
        if (nova == null) {
            return;
        } else if (nova.equals("")) {
            return;
        }
        //System.out.println(nova+obterExtensaoDoAquivo(documentoPessoal.getNome()));
        if (new DocumentoDAO().renomearDocumentoPessoal(documentoPessoal.getId(), nova + Arquivo.obterExtensaoDoAquivo(documentoPessoal.getNome()))) {
            dadosPessoaisBtnActionPerformed(null); //atualiza os documentos de novo
        } else {
            JOptionPane.showMessageDialog(null, "Ocorreu um problema ao tentar renomear o arquivo no Banco de Dados.");
        }
    }

    private void verificarParamTXT() {
        boolean cartao = false;
        boolean email = false;

        //File f = new File(this.getClass().getResource("param.txt").getFile());
        File f = new File(PATH + "param.txt");
        try {
            InputStream os = new FileInputStream(f);
            byte[] dados = os.readAllBytes();
            os.close();
            String param = new String(dados);

            //processo para obter se esta ativo ou inativo os parametros
            //inicio primeiro parametro
            int p1 = param.indexOf("[debito_automatico:"); //obtem o local onde esta contido essa frase
            //obtem o que vem a seguir de : (no caso tem que ser 1 ou 0, representando ativo ou inativo)
            String p1s = param.substring(p1 + "[debito_automatico:".length(), p1 + "[debito_automatico:".length() + 1);
            if (p1s.equals("1")) {
                cartao = true;
            }
            //fim primeiro parametro

            int p2 = param.indexOf("[lembrete_via_email_automatico:");
            String p2s = param.substring(p2 + "[lembrete_via_email_automatico:".length(), p2 + "[lembrete_via_email_automatico:".length() + 1);
            if (p2s.equals("1")) {
                email = true;
            }

            int p4 = param.indexOf("[iniciar_chat_servidor:");
            String p4s = param.substring(p4 + "[iniciar_chat_servidor:".length(), p4 + "[iniciar_chat_servidor:".length() + 1);
            if (p4s.equals("1")) {
                int p3 = param.indexOf("[porta_chat:");
                String p3s = param.substring(p3 + "[porta_chat:".length(), p3 + "[porta_chat:".length() + 4);
                System.out.println("\nporta: " + p3s);
                chatServer(p3s);
            };

        } catch (FileNotFoundException ex) {
            Logger.getLogger(ConnectionFactoryMySQL.class
                    .getName()).log(Level.SEVERE, null, ex);
            GerarLogErro.gerar(ex.getMessage());
        } catch (IOException ex) {
            Logger.getLogger(ConnectionFactoryMySQL.class
                    .getName()).log(Level.SEVERE, null, ex);
            GerarLogErro.gerar(ex.getMessage());
        }
        if (cartao) {
            verificar_cartao();
            System.out.println("\nD√©bitos Automaticos verificados.");
        }
        if (email) {
            verificar_envio_de_emails();
            System.out.println("Lembretes via email enviados.");
        }

    }

    private synchronized void verificar_envio_de_emails() {
        new Thread(() -> {
            new EmailDAO().enviarLembretes();
        }).start();
    }

    private synchronized void verificarDiaPassado() {
        new Thread(() -> {
            try {
                while (isRunning) {
                    if (!data_abertura_programa.equals(CDate.DataPTBRAtual())) {
                        verificarParamTXT();
                        data_abertura_programa = CDate.DataPTBRAtual();
                    }
                    Thread.sleep(3600000 * 6); //aguarda 6 horas
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(DocumentoJF.class
                        .getName()).log(Level.SEVERE, null, ex);
            }
        }).start();
    }

    private synchronized void chatServer(String porta) {
        new Thread(() -> {
            try {
                ServerSocket server;
                server = new ServerSocket(Integer.parseInt(porta));
                System.out.println("Servidor ativo na porta " + porta);
                ChatServidor chatServidor = new ChatServidor(); //somente para instanciar lista de clientes
                while (isRunning) {
                    System.out.println("Aguardando conex√£o...");
                    Socket con = server.accept();
                    System.out.println("Cliente conectado...");
                    Thread t = new ChatServidor(con);
                    t.start();
                }
            } catch (IOException ex) {
                System.err.println(ex);
            }
        }).start();
    }

    private synchronized void chat() {
        new Thread(() -> {
            chat.setVisible(true);
            if (!chat.conectado()) {
                chat.conectar();
            }
        }).start();

    }

    private void initJFramesAux() {
        new Thread(() -> {
            //inicia jframes auxiliares, para poder ter o controle de instancia-los somente uma vez
            atvJF = new AtividadesJF();
            //chat
            chat = new ChatJF();
            chat.conectar();
            try {
                chat.escutar();
            } catch (IOException ex) {
                System.err.println(ex);
            }
        }).start();
    }
}
