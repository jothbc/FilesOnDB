/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.Teofilo.Documentos;

import br.Teofilo.Bean.Cliente;
import br.Teofilo.Bean.Documento;
import br.Teofilo.Bean.DocumentoPessoal;
import br.Teofilo.Bean.GerarLogErro;
import br.Teofilo.Bean.Processo;
import br.Teofilo.Bean.TipoDoc;
import br.Teofilo.DAO.ClienteDAO;
import br.Teofilo.DAO.ComentarioDAO;
import br.Teofilo.DAO.DocumentoDAO;
import br.Teofilo.DAO.ProcessoDAO;
import br.Teofilo.DAO.TipoDocDAO;
import br.Teofilo.DAO.UserDAO;
import funcoes.AES;
import funcoes.RSA;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Point;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static jdk.internal.org.jline.keymap.KeyMap.key;

/**
 *
 * @author User
 */
public class DocumentoJF extends javax.swing.JFrame {

    private static Point point = new Point();
    List<Cliente> clientes;
    DefaultListModel listClientes = new DefaultListModel();
    DefaultListModel listProcessoPessoal = new DefaultListModel();
    DefaultListModel listProcessos = new DefaultListModel();
    DefaultListModel listTipo = new DefaultListModel();
    DefaultListModel listDocumentos = new DefaultListModel();
    private boolean btnPessoal = false;

    /**
     * Creates new form DocumentoJF
     */
    public DocumentoJF() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListCliente = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListDocumento = new javax.swing.JList<>();
        jLabelClientes = new javax.swing.JLabel();
        jLabelDocumentos = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        statustxt = new javax.swing.JTextField();
        modiftxt = new javax.swing.JFormattedTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListProcessos = new javax.swing.JList<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListTipos = new javax.swing.JList<>();
        jLabelRelacionadoCliente = new javax.swing.JLabel();
        jLabelProcessos = new javax.swing.JLabel();
        jLabelTiposDocumentos = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        downloadBtn = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        abertoEmtxt = new javax.swing.JTextField();
        informtxt = new javax.swing.JLabel();
        processoBtn = new javax.swing.JButton();
        dadosPessoaisBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel2.setBackground(new java.awt.Color(0, 0, 0));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/logo-2-teofilo-rocha-advocacia-balneario-camboriu-sc-advogado.png"))); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_cancel_18px.png"))); // NOI18N
        jButton2.setBorder(null);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 935, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(19, 19, 19))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jListCliente.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jListCliente);

        jListDocumento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListDocumentoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jListDocumento);

        jLabelClientes.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelClientes.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelClientes.setText("Clientes");

        jLabelDocumentos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelDocumentos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDocumentos.setText("Documentos");

        jLabel6.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel6.setText("Status");

        jLabel7.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel7.setText("Ult. Modificação");

        statustxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        statustxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        statustxt.setBorder(null);

        modiftxt.setBorder(null);
        try {
            modiftxt.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        modiftxt.setFocusLostBehavior(javax.swing.JFormattedTextField.COMMIT);
        modiftxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N

        jListProcessos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListProcessos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListProcessosMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jListProcessos);

        jListTipos.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListTipos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListTiposMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jListTipos);

        jLabelRelacionadoCliente.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelRelacionadoCliente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelRelacionadoCliente.setText("Relacionado ao Cliente");

        jLabelProcessos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelProcessos.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelProcessos.setText("Processos");

        jLabelTiposDocumentos.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabelTiposDocumentos.setText("Tipos de Documentos");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        jButton1.setBorder(null);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/eye-19.png"))); // NOI18N
        jButton3.setText("Visualizar");
        jButton3.setBorder(null);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-upload.png"))); // NOI18N
        jButton4.setText("Upload");
        jButton4.setBorder(null);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        downloadBtn.setBackground(new java.awt.Color(255, 255, 255));
        downloadBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        downloadBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/square-download.png"))); // NOI18N
        downloadBtn.setText("Download");
        downloadBtn.setBorder(null);
        downloadBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadBtnActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/pencil.png"))); // NOI18N
        jButton6.setText("Editar");
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_playlist_add_24px.png"))); // NOI18N
        jButton7.setBorder(null);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/bookmark-2.png"))); // NOI18N
        jButton8.setBorder(null);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton9.setBackground(new java.awt.Color(255, 255, 255));
        jButton9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/Teofilo/IMG/1x/ic_delete_24px.png"))); // NOI18N
        jButton9.setText("Deletar");
        jButton9.setBorder(null);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel8.setText("Aberto em");

        abertoEmtxt.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        abertoEmtxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        abertoEmtxt.setBorder(null);

        processoBtn.setBackground(new java.awt.Color(255, 255, 255));
        processoBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        processoBtn.setText("Processos");
        processoBtn.setBorder(null);
        processoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processoBtnActionPerformed(evt);
            }
        });

        dadosPessoaisBtn.setBackground(new java.awt.Color(255, 255, 255));
        dadosPessoaisBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        dadosPessoaisBtn.setText("Dados Pessoais");
        dadosPessoaisBtn.setBorder(null);
        dadosPessoaisBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dadosPessoaisBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelRelacionadoCliente, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelProcessos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelTiposDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(abertoEmtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(processoBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dadosPessoaisBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(jLabelDocumentos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton7))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(downloadBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
                    .addComponent(informtxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelClientes, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelDocumentos)
                        .addComponent(jLabelRelacionadoCliente)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(downloadBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(informtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(modiftxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(processoBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dadosPessoaisBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19)
                        .addComponent(jLabelProcessos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(statustxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(abertoEmtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelTiposDocumentos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        Point p = this.getLocation();
        this.setLocation(p.x + evt.getX() - point.x, p.y + evt.getY() - point.y);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        point.x = evt.getX();
        point.y = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jListClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListClienteMouseClicked
        statustxt.setText("");
        modiftxt.setText("");
        abertoEmtxt.setText("");
        popularListProcessoPessoal();
    }//GEN-LAST:event_jListClienteMouseClicked

    private void jListDocumentoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListDocumentoMouseClicked
        atualizarInfos();
    }//GEN-LAST:event_jListDocumentoMouseClicked

    private void jListProcessosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListProcessosMouseClicked
        statusDoProcesso();
        carregarDocumentosDoProcessoSelecionado();
    }//GEN-LAST:event_jListProcessosMouseClicked

    private void jListTiposMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListTiposMouseClicked
        statustxt.setText("");
        modiftxt.setText("");
        abertoEmtxt.setText("");
        carregarDocumentosDoTipoEProcessoSelecionado();
    }//GEN-LAST:event_jListTiposMouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        visualizarArquivo();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        upload();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void downloadBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadBtnActionPerformed
        download();
    }//GEN-LAST:event_downloadBtnActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        editar();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        addProcesso();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        addTipoDocumento();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        editarStatusDeProcesso();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        deletarDocumento();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void processoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processoBtnActionPerformed
        if (jListCliente.getSelectedIndex() < 0) {
            return;
        }
        limparListas();
        carregarProcessosDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
        btnPessoal = false;
    }//GEN-LAST:event_processoBtnActionPerformed

    private void dadosPessoaisBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dadosPessoaisBtnActionPerformed
        if (jListCliente.getSelectedIndex() < 0) {
            return;
        }
        limparListas();
        carregarDadosPessoaisDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
        btnPessoal = true;
    }//GEN-LAST:event_dadosPessoaisBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DocumentoJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DocumentoJF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField abertoEmtxt;
    private javax.swing.JButton dadosPessoaisBtn;
    private javax.swing.JButton downloadBtn;
    private javax.swing.JLabel informtxt;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabelClientes;
    private javax.swing.JLabel jLabelDocumentos;
    private javax.swing.JLabel jLabelProcessos;
    private javax.swing.JLabel jLabelRelacionadoCliente;
    private javax.swing.JLabel jLabelTiposDocumentos;
    private javax.swing.JList<String> jListCliente;
    private javax.swing.JList<String> jListDocumento;
    private javax.swing.JList<String> jListProcessos;
    private javax.swing.JList<String> jListTipos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JFormattedTextField modiftxt;
    private javax.swing.JButton processoBtn;
    private javax.swing.JTextField statustxt;
    // End of variables declaration//GEN-END:variables

    private void init() {
        jListCliente.setModel(listClientes);
        jListDocumento.setModel(listDocumentos);
        jListProcessos.setModel(listProcessos);
        jListTipos.setModel(listTipo);
        popularListClientes();
    }

    private void popularListClientes() {
        new Thread(() -> {
            jLabelClientes.setForeground(Color.BLUE);
            clientes = new ClienteDAO().getClintes();
            clientes.forEach((c) -> {
                listClientes.addElement(c);
            });
            jLabelClientes.setForeground(Color.BLACK);
        }).start();
    }

    private void popularListProcessoPessoal() {
        new Thread(() -> {
            jLabelRelacionadoCliente.setForeground(Color.BLUE);
            limparListas();
            listProcessoPessoal.removeAllElements();
            listProcessoPessoal.addElement("Processos");
            listProcessoPessoal.addElement("Dados Pessoais");
            jLabelRelacionadoCliente.setForeground(Color.BLACK);
        }).start();
    }

    private synchronized void carregarProcessosDoClienteSelecionado(Cliente c) {
        /*as Threads estavam dando problemas*/
        //new Thread(() -> {
        jLabelProcessos.setForeground(Color.BLUE);
        listProcessos.removeAllElements();
        List<Processo> processos = new ProcessoDAO().getProcessos(c.getId());
        processos.forEach((p) -> {
            listProcessos.addElement(p);
        });
        jLabelProcessos.setForeground(Color.BLACK);
        //}).start();
    }

    private synchronized void carregarDadosPessoaisDoClienteSelecionado(Cliente c) {
        /*as Threads estavam dando problemas*/
        //new Thread(() -> {
        jLabelDocumentos.setForeground(Color.BLUE);
        listDocumentos.removeAllElements();
        List<DocumentoPessoal> docuemnto_pessoal = new DocumentoDAO().getDocumentosPessoais(c.getId());
        docuemnto_pessoal.forEach((d) -> {
            listDocumentos.addElement(d);
        });
        jLabelDocumentos.setForeground(Color.BLACK);
        //}).start();
    }

    private void limparListas() {
        listDocumentos.removeAllElements();
        listProcessos.removeAllElements();
        listTipo.removeAllElements();
    }

    private synchronized void visualizarArquivo() {
        if (listDocumentos.isEmpty()) {
            return;
        }
        if (jListDocumento.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(null, "Selecione apenas um arquivo por vez para visualizar.");
            return;
        }
        if (jListDocumento.getSelectedIndex() < 0) {
            return;
        }
        new Thread(() -> {
            informtxt.setText("Carregando..");
            informtxt.setForeground(Color.red);
            Documento d = null;
            DocumentoPessoal dp = null;
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
                d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            }
            if (d != null || dp != null) {
                File f = null;
                if (d != null) {
                    f = new DocumentoDAO().getArquivo(d.getId(), "C:\\JCR LOG\\", "documentos");
                    f.deleteOnExit();
                } else if (dp != null) {
                    f = new DocumentoDAO().getArquivo(dp.getId(), "C:\\JCR LOG\\", "documentos_pessoais");
                    f.deleteOnExit();
                }
                try {
                    Desktop.getDesktop().open(f);
                } catch (IOException ex) {
                    Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                    GerarLogErro.gerar("Tentando visualizar um arquivo." + ex.getMessage());
                    JOptionPane.showMessageDialog(null, "Não há aplicativos associados ao arquivo especificado para esta operação..", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
            informtxt.setText("");
        }).start();
    }

    private void upload() {
        Cliente c;
        TipoDoc t = null;
        DocumentoPessoal dp = null;
        Processo p = null;
        try {
            c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
        } catch (Exception ex) {
            String erro = "Sem cliente selecionado para upload.";
            System.err.println(erro);
            JOptionPane.showMessageDialog(this, erro, "Cliente", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try {
            if (!btnPessoal) { //processo
                try {
                    p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem processo selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Processo", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
                try {
                    t = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                } catch (Exception e) {
                    String erro = "Sem tipo de documento selecionado para upload.";
                    System.err.println(erro);
                    JOptionPane.showMessageDialog(this, erro, "Tipo de Documento", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            } else if (btnPessoal) { //dados pessoais
                dp = new DocumentoPessoal();
                dp.setID_CLIENTE(c.getId());
            }
        } catch (HeadlessException ex) {
            System.err.println("Sem informar se é Processo ou Dados Pessoais para upload.." + ex);
            String erro = "Sem cliente selecionado para upload.";
            System.err.println(erro);
            JOptionPane.showMessageDialog(this, erro, "Cliente", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        UploadJD jd = new UploadJD(null, true, c, t, dp, p);
        jd.setVisible(true);
    }

    private synchronized void download() {
        if (listDocumentos.isEmpty() || jListDocumento.getSelectedIndices().length == 0) {
            return;
        }
        new Thread(() -> {
            JFileChooser fl = new JFileChooser();
            fl.setDialogTitle("Selecionar diretório");
            fl.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int op = fl.showSaveDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                //desabilitei o botao de download enquanto realiza um download para não acontecer te clicar para baixar duas vezes
                downloadBtn.setEnabled(false);
                informtxt.setText("Baixando...");
                informtxt.setForeground(Color.red);
                File arquivo = null;
                PrivateKey CHAVE_RSA_PRIVADA = null;
                if (listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[0]) instanceof Documento) {
                    Documento[] d = new Documento[jListDocumento.getSelectedIndices().length];
                    for (int x = 0; x < d.length; x++) {
                        d[x] = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                        if (d[x].isCrip()) {
                            if (CHAVE_RSA_PRIVADA == null) { //obtem a chave privada
                                JFileChooser chooser = new JFileChooser();
                                chooser.setDialogTitle("Selecione a chave privada para descriptografar o(s) arquivo(s)");
                                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                                int op2 = chooser.showOpenDialog(null);
                                if (op2 == JFileChooser.APPROVE_OPTION) {
                                    try {
                                        ObjectInputStream inputStream = null;
                                        inputStream = new ObjectInputStream(new FileInputStream(chooser.getSelectedFile()));
                                        CHAVE_RSA_PRIVADA = (PrivateKey) inputStream.readObject();
                                    } catch (FileNotFoundException ex) {
                                        Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException | ClassNotFoundException ex) {
                                        Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Operação abortada");
                                    return;
                                }
                            }
                            try {
                                byte[] chave_AES_cripDB = d[x].getCrip2();
                                System.out.println(chave_AES_cripDB.length);
                                
                                String decrip = RSA.decriptografa(chave_AES_cripDB, CHAVE_RSA_PRIVADA);
                                //CONVERTER ESSE HEXA EM BYTES DE NOVO!!!!!!!!!!
                                System.out.println(decrip);
                                SecretKey chaveAES = new SecretKeySpec(decrip.getBytes("UTF-8"), "AES");
                                arquivo = new DocumentoDAO().getArquivo(d[x].getId(), fl.getSelectedFile().getPath() + "\\", "documentos");
                                arquivo = AES.decrypt(arquivo.getPath(), arquivo.getParent()+ arquivo.getName().substring(8), chaveAES);
//                                ObjectInputStream inputStream = null;
//                                inputStream = new ObjectInputStream(new FileInputStream("C:\\Users\\User\\Desktop\\chaves\\public.key"));
//                                PublicKey CHAVE_RSA_PUBLICA = (PublicKey) inputStream.readObject();
//
//                                System.out.println(RSA.criptografa(AES.bytesToHex(chaveAES.getEncoded()), CHAVE_RSA_PUBLICA));
                            } catch (Exception e) {
                                System.out.println(e);
                            }
                        } else { //arquivo não criptografado
                            arquivo = new DocumentoDAO().getArquivo(d[x].getId(), fl.getSelectedFile().getPath() + "\\", "documentos");
                        }
                    }
                } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                    DocumentoPessoal[] dp = new DocumentoPessoal[jListDocumento.getSelectedIndices().length];
                    for (int x = 0; x < dp.length; x++) {
                        dp[x] = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndices()[x]);
                        if (dp[x].isCrip()) {
                            if (CHAVE_RSA_PRIVADA == null) {
                                JFileChooser chooser = new JFileChooser();
                                chooser.setDialogTitle("Selecione a chave privada para descriptografar o(s) arquivo(s)");
                                chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
                                int op2 = chooser.showOpenDialog(null);
                                if (op2 == JFileChooser.APPROVE_OPTION) {
                                    try {
                                        ObjectInputStream inputStream = null;
                                        inputStream = new ObjectInputStream(new FileInputStream(chooser.getSelectedFile()));
                                        CHAVE_RSA_PRIVADA = (PrivateKey) inputStream.readObject();
                                    } catch (FileNotFoundException ex) {
                                        Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException | ClassNotFoundException ex) {
                                        Logger.getLogger(DocumentoJF.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Operação abortada");
                                    return;
                                }
                            }

                            //aqui
                        } else {
                            arquivo = new DocumentoDAO().getArquivo(dp[x].getId(), fl.getSelectedFile().getPath() + "\\", "documentos_pessoais");
                        }
                    }
                    downloadBtn.setEnabled(true);
                    informtxt.setText("");
                }
            }
        }).start();
    }

    private void atualizarInfos() {
        if (listDocumentos.isEmpty()) {
            return;
        }
        if (jListDocumento.getSelectedIndices().length == 1) {
            if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
                Documento d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                statustxt.setText(d.getStatus());
                modiftxt.setText(d.getModificacao());
                abertoEmtxt.setText("");
            } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
                DocumentoPessoal dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                statustxt.setText("");
                modiftxt.setText(dp.getAlteracao());
                abertoEmtxt.setText("");
            }
        } else {
            statustxt.setText("");
            modiftxt.setText("");
            abertoEmtxt.setText("");
        }
    }

    private void editar() {
        if (jListDocumento.getSelectedIndices().length > 1) {
            JOptionPane.showMessageDialog(null, "Edite um documento por vez.");
            return;
        }
        if (jListDocumento.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Selecione um documento para editar.");
            return;
        }
        Documento d = null;
        DocumentoPessoal dp = null;
        TipoDoc tp = null;
        Processo p = null;
        Cliente c = null;
        if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
            try {
                d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                tp = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            } catch (Exception ex) {
                System.err.println("Editar>> Documento, tipoDoc ou Processo retornaram erro.." + ex);
            }
        } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
            try {
                dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
                c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            } catch (Exception ex) {
                System.err.println("Editar>>DocumentoPessoal ou Cliente retornaram erro.." + ex);
            }
        }
        if (d != null || dp != null) {
            JFileChooser fl = new JFileChooser();
            fl.setDialogTitle("Selecionar arquivo");
            fl.setFileSelectionMode(JFileChooser.FILES_ONLY);
            int op = fl.showOpenDialog(null);
            if (op == JFileChooser.APPROVE_OPTION) {
                File f = fl.getSelectedFile();
                if (d != null && tp != null && p != null) {
                    if (!new DocumentoDAO().updateDocumento(f, d.getId(), tp.getId(), p.getId())) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    } else {
                        String coment = "@Editou um Documento.\n" + f.getName();
                        if (!new ComentarioDAO().addComentario(coment, new UserDAO().getUser().getId())) {
                            GerarLogErro.gerar("Erro ao tentar comentar uma edição de um Documento " + f.getName());
                        }
                        carregarDocumentosDoTipoEProcessoSelecionado();
                    }
                } else if (dp != null && c != null) {
                    if (!new DocumentoDAO().updateDocumentoPessoal(f, dp.getId())) {
                        JOptionPane.showMessageDialog(null, "Erro ao tentar atualizar o arquivo no banco de dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                    } else {
                        String coment = "@Editou um Documento Pessoal.\n" + f.getName();
                        if (!new ComentarioDAO().addComentario(coment, new UserDAO().getUser().getId())) {
                            GerarLogErro.gerar("Erro ao tentar comentar uma edição de um Documento Pessoal " + f.getName());
                        }
                        carregarDadosPessoaisDoClienteSelecionado(c);
                    }
                }
            }
        }
    }

    private void carregarDocumentosDoProcessoSelecionado() {
        new Thread(() -> {
            jLabelTiposDocumentos.setForeground(Color.BLUE);
            Cliente c;
            try {
                c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            } catch (Exception e) {
                System.err.println("carregarDocumentosDoProcessoSelecionado>>Sem cliente selecionado.");
                GerarLogErro.gerar("carregarDocumentosDoProcessoSelecionado>>Sem cliente selecionado.\n" + e.getMessage());
                return;
            }
            Processo p;
            try {
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            } catch (Exception e) {
                System.err.println("carregarDocumentosDoProcessoSelecionado>>Sem processo selecionado.");
                GerarLogErro.gerar("carregarDocumentosDoProcessoSelecionado>>Sem processo selecionado.\n" + e.getMessage());
                return;
            }
            listTipo.removeAllElements();
            listDocumentos.removeAllElements();
            if (!listProcessos.isEmpty()) {
                List<TipoDoc> tiposDeDocumentos = new TipoDocDAO().findAllByClienteEProcesso(c, p);
                for (TipoDoc t : tiposDeDocumentos) {
                    listTipo.addElement(t);
                }
            }
            jLabelTiposDocumentos.setForeground(Color.BLACK);
        }).start();
    }

    private void carregarDocumentosDoTipoEProcessoSelecionado() {
        new Thread(() -> {
            listDocumentos.removeAllElements();
            if (listTipo.isEmpty()) {
                return;
            }
            try {
                Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
                Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                TipoDoc t = (TipoDoc) listTipo.getElementAt(jListTipos.getSelectedIndex());
                List<Documento> documentos = new DocumentoDAO().getDocumentosDeProcessoETipo(c.getId(), p.getId(), t.getId());
                documentos.forEach((d) -> {
                    listDocumentos.addElement(d);
                });
            } catch (Exception ex) {
                System.err.println(ex);
            }
        }).start();
    }

    private void addProcesso() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            NovoProcessoJD jd = new NovoProcessoJD(null, true, c);
            jd.setVisible(true);
            processoBtnActionPerformed(null);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Sem cliente selecionado.\n" + ex, "Erro", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void addTipoDocumento() {
        try {
            Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            NovoTipoDocJD jd = new NovoTipoDocJD(null, true, c, p);
            jd.setVisible(true);
            carregarDocumentosDoProcessoSelecionado();
        } catch (Exception ex) {
            System.out.println("Sem processo selecionado." + ex);
        }
    }

    private void statusDoProcesso() {
        if (!listProcessos.isEmpty()) {
            Processo p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
            statustxt.setText(p.getStatus());
            abertoEmtxt.setText(p.getData());
            modiftxt.setText("");
        }
    }

    private void editarStatusDeProcesso() {
        if (!listProcessos.isEmpty()) {
            Processo p;
            try {
                p = (Processo) listProcessos.getElementAt(jListProcessos.getSelectedIndex());
                StatusProcessoJD jd = new StatusProcessoJD(null, true, p);
                jd.setVisible(true);
                statustxt.setText("");
                Cliente c = (Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex());
                carregarProcessosDoClienteSelecionado(c);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Sem processo selecionado.", "Status Processo", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    private void deletarDocumento() {
        if (jListDocumento.getSelectedIndex() < 0) {
            return;
        }
        int op = -1;
        op = JOptionPane.showOptionDialog(null, "Deseja realmente excluir esse arquivo?", "Confirmação de exclusão", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE, null, null, null);
        if (op != 0) {
            return;
        }
        if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof Documento) {
            Documento d = (Documento) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            File f = new DocumentoDAO().getArquivo(d.getId(), "C:\\JCR LOG\\", "documentos");
            boolean moveToTrash = Desktop.getDesktop().moveToTrash(f);
            if (moveToTrash) {
                if (!new DocumentoDAO().removeDocumento(d)) {
                    JOptionPane.showMessageDialog(null, "Erro ao tentar remover o documento do Bando de Dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                } else {
                    String coment = "@Removeu um Documento.\n" + d.getNome();
                    if (!new ComentarioDAO().addComentario(coment, new UserDAO().getUser().getId())) {
                        GerarLogErro.gerar("Erro ao tentar comentar a remoção de um documento " + d.getNome());
                    }
                    carregarDocumentosDoTipoEProcessoSelecionado();
                }
            }
        } else if (listDocumentos.getElementAt(jListDocumento.getSelectedIndex()) instanceof DocumentoPessoal) {
            DocumentoPessoal dp = (DocumentoPessoal) listDocumentos.getElementAt(jListDocumento.getSelectedIndex());
            File f = new DocumentoDAO().getArquivo(dp.getId(), "C:\\JCR LOG\\", "documentos_pessoais");
            boolean moveToTrash = Desktop.getDesktop().moveToTrash(f);
            if (moveToTrash) {
                if (!new DocumentoDAO().removeDocumentoPessoal(dp)) {
                    JOptionPane.showMessageDialog(null, "Erro ao tentar remover o documento pessoal do Bando de Dados.", "Erro", JOptionPane.ERROR_MESSAGE);
                } else {
                    String coment = "@Removeu um Documento`Pessoal.\n" + dp.getNome();
                    if (!new ComentarioDAO().addComentario(coment, new UserDAO().getUser().getId())) {
                        GerarLogErro.gerar("Erro ao tentar comentar a remoção de um Documento Pessoal " + dp.getNome());
                    }
                    carregarDadosPessoaisDoClienteSelecionado((Cliente) listClientes.getElementAt(jListCliente.getSelectedIndex()));
                }
            }
        }
    }

}
